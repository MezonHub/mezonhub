// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zvalidator/proposal.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpdateZValidatorStatus int32

const (
	UpdateZValidatorStatusUnspecified UpdateZValidatorStatus = 0
	UpdateZValidatorStatusSuccess     UpdateZValidatorStatus = 1
	UpdateZValidatorStatusFailed      UpdateZValidatorStatus = 2
)

var UpdateZValidatorStatus_name = map[int32]string{
	0: "UPDATE_ZVALIDATOR_STATUS_UNSPECIFIED",
	1: "UPDATE_ZVALIDATOR_STATUS_SUCCESS",
	2: "UPDATE_ZVALIDATOR_STATUS_FAILED",
}

var UpdateZValidatorStatus_value = map[string]int32{
	"UPDATE_ZVALIDATOR_STATUS_UNSPECIFIED": 0,
	"UPDATE_ZVALIDATOR_STATUS_SUCCESS":     1,
	"UPDATE_ZVALIDATOR_STATUS_FAILED":      2,
}

func (x UpdateZValidatorStatus) String() string {
	return proto.EnumName(UpdateZValidatorStatus_name, int32(x))
}

func (UpdateZValidatorStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_1df077446bc62781, []int{0}
}

type UpdateZValidatorProposal struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom       string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	OldAddress  string `protobuf:"bytes,4,opt,name=oldAddress,proto3" json:"oldAddress,omitempty"`
	NewAddress  string `protobuf:"bytes,5,opt,name=newAddress,proto3" json:"newAddress,omitempty"`
	PropId      string `protobuf:"bytes,6,opt,name=propId,proto3" json:"propId,omitempty"`
	Cycle       *Cycle `protobuf:"bytes,7,opt,name=cycle,proto3" json:"cycle,omitempty"`
}

func (m *UpdateZValidatorProposal) Reset()         { *m = UpdateZValidatorProposal{} }
func (m *UpdateZValidatorProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateZValidatorProposal) ProtoMessage()    {}
func (*UpdateZValidatorProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df077446bc62781, []int{0}
}
func (m *UpdateZValidatorProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateZValidatorProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateZValidatorProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateZValidatorProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateZValidatorProposal.Merge(m, src)
}
func (m *UpdateZValidatorProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateZValidatorProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateZValidatorProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateZValidatorProposal proto.InternalMessageInfo

func (m *UpdateZValidatorProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetOldAddress() string {
	if m != nil {
		return m.OldAddress
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetNewAddress() string {
	if m != nil {
		return m.NewAddress
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *UpdateZValidatorProposal) GetCycle() *Cycle {
	if m != nil {
		return m.Cycle
	}
	return nil
}

type UpdateZValidatorReportProposal struct {
	Creator     string                 `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Denom       string                 `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	PoolAddress string                 `protobuf:"bytes,3,opt,name=poolAddress,proto3" json:"poolAddress,omitempty"`
	PropId      string                 `protobuf:"bytes,4,opt,name=propId,proto3" json:"propId,omitempty"`
	Cycle       *Cycle                 `protobuf:"bytes,5,opt,name=cycle,proto3" json:"cycle,omitempty"`
	Status      UpdateZValidatorStatus `protobuf:"varint,6,opt,name=status,proto3,enum=mezonhub.mezonhub.zvalidator.UpdateZValidatorStatus" json:"status,omitempty"`
}

func (m *UpdateZValidatorReportProposal) Reset()         { *m = UpdateZValidatorReportProposal{} }
func (m *UpdateZValidatorReportProposal) String() string { return proto.CompactTextString(m) }
func (*UpdateZValidatorReportProposal) ProtoMessage()    {}
func (*UpdateZValidatorReportProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_1df077446bc62781, []int{1}
}
func (m *UpdateZValidatorReportProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateZValidatorReportProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateZValidatorReportProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateZValidatorReportProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateZValidatorReportProposal.Merge(m, src)
}
func (m *UpdateZValidatorReportProposal) XXX_Size() int {
	return m.Size()
}
func (m *UpdateZValidatorReportProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateZValidatorReportProposal.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateZValidatorReportProposal proto.InternalMessageInfo

func (m *UpdateZValidatorReportProposal) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *UpdateZValidatorReportProposal) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *UpdateZValidatorReportProposal) GetPoolAddress() string {
	if m != nil {
		return m.PoolAddress
	}
	return ""
}

func (m *UpdateZValidatorReportProposal) GetPropId() string {
	if m != nil {
		return m.PropId
	}
	return ""
}

func (m *UpdateZValidatorReportProposal) GetCycle() *Cycle {
	if m != nil {
		return m.Cycle
	}
	return nil
}

func (m *UpdateZValidatorReportProposal) GetStatus() UpdateZValidatorStatus {
	if m != nil {
		return m.Status
	}
	return UpdateZValidatorStatusUnspecified
}

func init() {
	proto.RegisterEnum("mezonhub.mezonhub.zvalidator.UpdateZValidatorStatus", UpdateZValidatorStatus_name, UpdateZValidatorStatus_value)
	proto.RegisterType((*UpdateZValidatorProposal)(nil), "mezonhub.mezonhub.zvalidator.UpdateZValidatorProposal")
	proto.RegisterType((*UpdateZValidatorReportProposal)(nil), "mezonhub.mezonhub.zvalidator.UpdateZValidatorReportProposal")
}

func init() { proto.RegisterFile("zvalidator/proposal.proto", fileDescriptor_1df077446bc62781) }

var fileDescriptor_1df077446bc62781 = []byte{
	// 464 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0x41, 0x6b, 0xdb, 0x30,
	0x18, 0xb5, 0xb2, 0x24, 0x65, 0x2a, 0x8c, 0x20, 0x4a, 0xf1, 0x4c, 0xa7, 0xb9, 0xdd, 0x06, 0x65,
	0x87, 0x18, 0xba, 0x5d, 0x76, 0xf4, 0x12, 0x67, 0x18, 0xc2, 0x1a, 0xac, 0xb8, 0x87, 0x5d, 0x82,
	0x6b, 0xa9, 0x99, 0xc1, 0x8d, 0x84, 0xa5, 0x6c, 0xeb, 0x3f, 0x18, 0x39, 0x0d, 0x76, 0xce, 0x69,
	0x7f, 0x66, 0xc7, 0x1e, 0x77, 0x1c, 0xc9, 0x0f, 0xe9, 0xb0, 0x1c, 0x2f, 0xa6, 0xb8, 0x85, 0x1d,
	0x76, 0xfb, 0xbe, 0xf7, 0xde, 0xf7, 0xc4, 0x7b, 0x20, 0xf8, 0x38, 0xfb, 0x14, 0xa5, 0x09, 0x8d,
	0x14, 0xcf, 0x1c, 0x91, 0x71, 0xc1, 0x65, 0x94, 0x76, 0x45, 0xc6, 0x15, 0x47, 0x07, 0x52, 0x45,
	0x17, 0xc9, 0xc7, 0xf9, 0x79, 0xf7, 0xef, 0xb0, 0x15, 0x5b, 0x7b, 0x53, 0x3e, 0xe5, 0x5a, 0xe8,
	0xe4, 0x53, 0x71, 0x63, 0x99, 0x15, 0xbb, 0x29, 0x9b, 0x31, 0x99, 0xc8, 0x82, 0x39, 0xba, 0x01,
	0xd0, 0x0c, 0x05, 0x8d, 0x14, 0x0b, 0xce, 0x4a, 0xc9, 0x68, 0xf3, 0x20, 0x32, 0xe1, 0x4e, 0x9c,
	0xb1, 0x1c, 0x32, 0x81, 0x0d, 0x8e, 0x1f, 0x06, 0xe5, 0x8a, 0xf6, 0x60, 0x8b, 0xb2, 0x19, 0xbf,
	0x34, 0x1b, 0x1a, 0x2f, 0x16, 0x64, 0xc3, 0x5d, 0xc1, 0x79, 0xea, 0x52, 0x9a, 0x31, 0x29, 0xcd,
	0x07, 0x9a, 0xab, 0x42, 0x08, 0x43, 0xc8, 0x53, 0x5a, 0x0a, 0x9a, 0x5a, 0x50, 0x41, 0x72, 0x7e,
	0xc6, 0x3e, 0x97, 0x7c, 0xab, 0xe0, 0xb7, 0x08, 0xda, 0x87, 0xed, 0xbc, 0x0e, 0x9f, 0x9a, 0x6d,
	0xcd, 0x6d, 0x36, 0xf4, 0x06, 0xb6, 0xe2, 0xab, 0x38, 0x65, 0xe6, 0x8e, 0x0d, 0x8e, 0x77, 0x4f,
	0x9e, 0x75, 0xef, 0x2b, 0xa9, 0xdb, 0xcb, 0xa5, 0x41, 0x71, 0x71, 0xf4, 0xbd, 0x01, 0xf1, 0xed,
	0x06, 0x02, 0x26, 0x78, 0xa6, 0xfe, 0x63, 0x0f, 0xdb, 0x1c, 0xcd, 0xfa, 0x1c, 0xad, 0x7f, 0xcd,
	0x81, 0x86, 0xb0, 0x2d, 0x55, 0xa4, 0xe6, 0x52, 0x57, 0xf3, 0xe8, 0xe4, 0xf5, 0xfd, 0xb7, 0xb7,
	0x23, 0x13, 0x7d, 0x1b, 0x6c, 0x3c, 0x5e, 0xde, 0x00, 0xb8, 0x5f, 0x2f, 0x41, 0xa7, 0xf0, 0x79,
	0x38, 0xea, 0xbb, 0x63, 0x6f, 0x12, 0x9c, 0xb9, 0x43, 0xbf, 0xef, 0x8e, 0x4f, 0x83, 0x09, 0x19,
	0xbb, 0xe3, 0x90, 0x4c, 0xc2, 0xf7, 0x64, 0xe4, 0xf5, 0xfc, 0x81, 0xef, 0xf5, 0x3b, 0x86, 0xf5,
	0x62, 0xb1, 0xb4, 0x0f, 0xeb, 0x5d, 0xc2, 0x99, 0x14, 0x2c, 0x4e, 0x2e, 0x12, 0x46, 0xd1, 0x3b,
	0x68, 0xdf, 0x69, 0x48, 0xc2, 0x5e, 0xcf, 0x23, 0xa4, 0x03, 0xac, 0xc3, 0xc5, 0xd2, 0x7e, 0x52,
	0x6f, 0x46, 0xe6, 0x71, 0x9c, 0xb7, 0xea, 0xc1, 0xa7, 0x77, 0x1a, 0x0d, 0x5c, 0x7f, 0xe8, 0xf5,
	0x3b, 0x0d, 0xcb, 0x5e, 0x2c, 0xed, 0x83, 0x7a, 0x9f, 0x41, 0x94, 0xa4, 0x8c, 0x5a, 0xcd, 0xaf,
	0x3f, 0xb0, 0xf1, 0xd6, 0xff, 0xb9, 0xc2, 0xe0, 0x7a, 0x85, 0xc1, 0xef, 0x15, 0x06, 0xdf, 0xd6,
	0xd8, 0xb8, 0x5e, 0x63, 0xe3, 0xd7, 0x1a, 0x1b, 0x1f, 0x9c, 0x69, 0xa2, 0xf2, 0x36, 0x63, 0x7e,
	0xe9, 0x94, 0xd5, 0x6e, 0x87, 0x2f, 0x4e, 0xe5, 0xb3, 0xa9, 0x2b, 0xc1, 0xe4, 0x79, 0x5b, 0xff,
	0xb5, 0x57, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x7a, 0xef, 0x3e, 0x8c, 0xd6, 0x03, 0x00, 0x00,
}

func (m *UpdateZValidatorProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateZValidatorProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateZValidatorProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cycle != nil {
		{
			size, err := m.Cycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.NewAddress) > 0 {
		i -= len(m.NewAddress)
		copy(dAtA[i:], m.NewAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.NewAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OldAddress) > 0 {
		i -= len(m.OldAddress)
		copy(dAtA[i:], m.OldAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.OldAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateZValidatorReportProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateZValidatorReportProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpdateZValidatorReportProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintProposal(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Cycle != nil {
		{
			size, err := m.Cycle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProposal(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PropId) > 0 {
		i -= len(m.PropId)
		copy(dAtA[i:], m.PropId)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PropId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolAddress) > 0 {
		i -= len(m.PoolAddress)
		copy(dAtA[i:], m.PoolAddress)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.PoolAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintProposal(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProposal(dAtA []byte, offset int, v uint64) int {
	offset -= sovProposal(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UpdateZValidatorProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.OldAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.NewAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Cycle != nil {
		l = m.Cycle.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	return n
}

func (m *UpdateZValidatorReportProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PoolAddress)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	l = len(m.PropId)
	if l > 0 {
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Cycle != nil {
		l = m.Cycle.Size()
		n += 1 + l + sovProposal(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovProposal(uint64(m.Status))
	}
	return n
}

func sovProposal(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProposal(x uint64) (n int) {
	return sovProposal(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpdateZValidatorProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateZValidatorProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateZValidatorProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cycle == nil {
				m.Cycle = &Cycle{}
			}
			if err := m.Cycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateZValidatorReportProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateZValidatorReportProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateZValidatorReportProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PropId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cycle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProposal
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProposal
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cycle == nil {
				m.Cycle = &Cycle{}
			}
			if err := m.Cycle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= UpdateZValidatorStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProposal(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProposal
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProposal(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProposal
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProposal
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProposal
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProposal
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProposal
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProposal        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProposal          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProposal = fmt.Errorf("proto: unexpected end of group")
)
